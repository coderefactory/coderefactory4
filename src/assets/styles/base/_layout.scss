// Main Site Layout

html {
  overflow-y: hidden;
  background-color: #17172f;

  @include touchscreen {
    height: -webkit-fill-available;
  }
}

body {
  min-height: 100vh;
  background-color: transparent;
  overflow: hidden;

  @include touchscreen {
    min-height: -webkit-fill-available;
  }

  .layout {
    background-color: transparent;
    position: relative;

    &:before {
      content: '';
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;

      background-position: 100% 0%;
      background-size: cover;
      background-repeat: no-repeat;
      // background-image: radial-gradient(transparent 0%, rgba(56, 21, 58, 0.87) 70%), url(/assets/images/san_francisco_1915.jpg);
      background-image: radial-gradient(transparent 0%, rgba(56, 21, 58, 0.87) 70%), url(https://res.cloudinary.com/coderefactory/image/upload/f_auto/v1603412788/cr4/san_francisco_1915.jpg);

      // transform: scale(2) translate(17vw, -14vh);
      // transform-origin: 100% 0%;
      // transform: scale(2) translate(calc((var(--scroll, 0) * 30vw) + 17vw), calc((var(--scroll, 0) * -30vh) - 14vh));
      transform-origin: calc(100% - (var(--scroll, 0) * 100%)) calc(var(--scroll, 0) * 100%);
      transform: scale(2);

      @media (prefers-reduced-motion: reduce) {
        transform-origin: 0% 100%;
      }

      // transition: 0.2s ease-in-out transform, 0.2s linear filter;

      // filter: hue-rotate(calc(var(--scroll, 0) * 360deg)) saturate(0.7) opacity(0.4);
      filter: hue-rotate(calc(330deg - (var(--scroll, 0) * 226deg))) saturate(0.7) opacity(0.7);

      z-index: -1;
    }

    .header,
    .footer {
      flex: none;
    }

    .main {
      z-index: 5;
      height: 100vh;
      overflow-x: hidden;
      @include scrollable;
      @include custom-scrollbar(rgba(128,128,128,0.5));
      background-color: transparent;
      position: relative;

      // scroll-snap behavior
      //  - under normal viewport conditions:
      scroll-snap-type: y mandatory;
      //  - Chrome has a stupid scrollwheel bug; see https://coderefactory.atlassian.net/browse/CR-14
      @include chrome {
        scroll-snap-type: y proximity;
      }
      //  - if a landscape orientation gets squeezed vertically,
      //    abandon the snap and just make sure all content can be viewed
      @include very-short-screen {
        scroll-snap-type: none;
      }

      &::after {
        content: '';
        display: block;
        height: 0px;
        visibility: hidden;
      }
    }
  }

  // if we're making an interior element look/act like a pseudo-modal,
  // .main has to be in front of .header
  @include short-touchscreen {
    &.modal-open {
      .layout .main {
        overflow: hidden;
        z-index: 101;
      }
    }
  }
}

.container {
  width: 90%;
  margin-left: auto;
  margin-right: auto;
  max-width: $container-max-width;
}

section {
  color: white;
  position: relative;
  width: 100vw;
  padding: 90px 0 20px;
  z-index: 1;
  scroll-snap-align: start;

  @include mq(md) {
    padding-top: 150px;
  }

  // reconfigure for iPhone landscape
  @include phone-landscape {
    padding: 80px 0 20px;
  }

  // if the viewport is tall enough, do the full-page-height slide effect
  min-height: 100vh;
  @media (min-height: breakpoint-min(md, $breakpoints)) {
    height: 100vh;
  }
  // otherwise normal flow, but make sure contents are vertically centered
  @media (max-height: breakpoint-min(md, $breakpoints) - 1px) {
    display: flex;
    flex-direction: column;

    & > * {
      flex: 1;
    }
  }

  // without either CSS variables or filters, 
  // bg color tween effect won't work,
  // so let's build a comparable fallback
  &:before {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    display: none;
  }
}

// fallback for no-cssfilters and no-cssvariables
html.no-cssfilters,
html.no-cssvariables {
  section:before {
    display: block;
  }
}

// https://allthingssmitty.com/2020/05/11/css-fix-for-100vh-in-mobile-webkit/
.touchscreen-vertical-fill {
  @include touchscreen {
    min-height: -webkit-fill-available;
  }
}